<?php



/*
 1  	E_ERROR (integer)  	 Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.  	 
2 	E_WARNING (integer) 	Run-time warnings (non-fatal errors). Execution of the script is not halted. 	 
4 	E_PARSE (integer) 	Compile-time parse errors. Parse errors should only be generated by the parser. 	 
8 	E_NOTICE (integer) 	Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script. 	 
16 	E_CORE_ERROR (integer) 	Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP. 	since PHP 4
32 	E_CORE_WARNING (integer) 	Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP. 	since PHP 4
64 	E_COMPILE_ERROR (integer) 	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine. 	since PHP 4
128 	E_COMPILE_WARNING (integer) 	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine. 	since PHP 4
256 	E_USER_ERROR (integer) 	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 4
512 	E_USER_WARNING (integer) 	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 4
1024 	E_USER_NOTICE (integer) 	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 4
2048 	E_STRICT (integer) 	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code. 	since PHP 5
4096 	E_RECOVERABLE_ERROR (integer) 	Catchable fatal error. It indicates that a probably dangerous error occured, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR. 	since PHP 5.2.0
8192 	E_DEPRECATED (integer) 	Run-time notices. Enable this to receive warnings about code that will not work in future versions. 	since PHP 5.3.0
16384 	E_USER_DEPRECATED (integer) 	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 5.3.0
30719 	E_ALL (integer) 	All errors and warnings, as supported, except of level E_STRICT in PHP < 6. 	32767 in PHP 6, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously 
 
 
 Note: 1-256 go to the error.log and cannot be handled here if they are through system
 error_reporting() functions.
*/


//10 is reserved for assertion
//other codes are acceptable, 0 should be success and
// 1-9 can be used as desired.
function addUserResponseMessage($data, $code, $msg)
{
	$data['userCode'] = $code;
	$data['userMsg'] = $msg;
	echo json_encode($data);
}



function customErrorHandler($type, $msg, $file, $line)
{
	date_default_timezone_set('America/Los_Angeles');
	$today = date("Y-m-d");
	$filename = "./logs/$today.txt";
	$fd = fopen($filename, "ab");
	$str = "[" . date("h:i:s", time()) . "]" . $msg;
	fwrite($fd, $str . " " .$file . "(" . $line .")"  . PHP_EOL);
	fclose($fd);
	
	
	if($type < E_USER_ERROR)
	{
		header('Content-type: application/json');
		$dummy = array( 'data' => null);
		addUserResponseMessage($dummy, 10, "ASSERTED with msg: " . $msg );
		die;
	}
	else
	{
		//TBD: these are for info. error_log("$msg (error type $type)", 0);	
	}
}


function customObjectErrorHandler($type, $obj, $file, $line)
{
	ob_start();
	var_dump($obj);
    	$msg = ob_get_clean();	
	customErrorHandler($type, $msg, $file, $line);
}



?>